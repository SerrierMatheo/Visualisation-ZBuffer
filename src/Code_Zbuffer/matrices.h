#ifndef MATRICES_H
#define MATRICES_H

#include <vector>
#include "donnees.h"

using namespace std;

///////////////////////////////////////////
// Types pour les vecteurs et matrices
///////////////////////////////////////////
typedef vector<double> Vec;
typedef vector<Vec> Mat;

///////////////////////////////////////////
// Matrice identité 4x4
///////////////////////////////////////////
void identite(Mat &mat);

///////////////////////////////////////////
// Matrice de rotation d'angle teta
// autour de l'axe spécifié
///////////////////////////////////////////
void rotation(Mat &mat, double angle, char axe);

///////////////////////////////////////////
// Ajoute la translation tr à la matrice mat
///////////////////////////////////////////
void translation(Mat &mat, Vec &tr);

///////////////////////////////////////////
// Matrice de perspective avec focale f
// et centre optique
///////////////////////////////////////////
void perspective(Mat &mat, double f, double cx, double cy);

///////////////////////////////////////////
// Multiplication de 2 matrices A et B dans C.
///////////////////////////////////////////
void matMul(Mat &A, Mat& B, Mat &C);

///////////////////////////////////////////
// Multiplication d'une matrice par un coefficient
///////////////////////////////////////////
void matCoef(Mat &A, double coef);

///////////////////////////////////////////
// Multiplication d'un vecteur par un coefficient
///////////////////////////////////////////
void vecCoef(Vec &vec, double coef);

///////////////////////////////////////////
// Produit scalaire de deux vecteurs
///////////////////////////////////////////
double prodScal(Vec &v1, Vec &v2);

///////////////////////////////////////////
// Produit vectoriel de deux vecteurs
///////////////////////////////////////////
void prodVec(Vec &v1, Vec &v2, Vec &res);

///////////////////////////////////////////
// Différence entre deux vecteurs
///////////////////////////////////////////
void vecDiff(Vec &v1, Vec &v2, Vec &res);

///////////////////////////////////////////
// Normalisation d'un vecteur
///////////////////////////////////////////
void normalisation(Vec &v);

///////////////////////////////////////////
// Transformation d'un Point3D en vecteur homogène
///////////////////////////////////////////
void projection(Mat &mat, Vec &ptMonde, Vec &ptCamera);

#endif
